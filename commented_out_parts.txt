//void roadsideBlocks(unsigned int& VAO, Shader& shader, glm::mat4 offset, glm::mat4 alTogether)
//{
//	float width = 5.0f;
//	float length = 7.0f;
//	glm::mat4 identity, model, translate, scale;
//	identity = glm::mat4(1.0f);
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", false);
//	shader.setVec3("material.ambient", glm::vec3(0.2f, 0.2f, 0.2f));
//	shader.setVec3("material.diffuse", glm::vec3(0.0f, 1.0f, 0.0f));
//	shader.setVec3("material.specular", glm::vec3(1.0f, 1.0f, 1.0f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.0f, 0.1f, 0.0f));
//	
//	scale = glm::scale(identity, glm::vec3(-width, 0.1f, length));
//	model = alTogether * scale * offset;
//	drawCube(VAO, shader, model);
//}
//
//void road(unsigned int& VAO, Shader& shader, glm::mat4 offset, glm::mat4 alTogether)
//{
//	float roadWidth = 2.0f;
//	float roadLength = 7.0f;
//
//	glm::mat4 identity, model, translate, scale;
//	identity = glm::mat4(1.0f);
//
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", true);
//	unsigned int diffuseMap = loadTexture("roadLined.jpg");
//	unsigned int specularMap = loadTexture("roadLined.jpg");	
//	shader.setInt("materialtex.diffuse", 0);
//	shader.setInt("materialtex.specular", 1);
//	shader.setFloat("materialtex.shininess", 32.0f);
//
//	glActiveTexture(GL_TEXTURE0); 
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1); 
//	glBindTexture(GL_TEXTURE_2D, specularMap); 
//
//	scale = glm::scale(identity, glm::vec3(roadWidth, 0.1f, roadLength));
//	//translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, -1 * roadLength));
//	model = alTogether * scale * offset;
//
//	shader.setMat4("model", model);
//	drawCube(VAO, shader, model);
//
//	float xoffset = 0.5f, yoffset = 0.5f;
//	box(VAO, shader, glm::translate(identity, glm::vec3(5.0f, yoffset + 0.2f, -1.0f)));
//	box(VAO, shader, glm::translate(identity, glm::vec3(5.0f, yoffset + 1.2f, -1.0f)));
//	box(VAO, shader, glm::translate(identity, glm::vec3(5.0f, yoffset + 0.2f, 0.0f)));
//	roadsideBlocks(VAO, shader, glm::translate(identity, glm::vec3(xoffset, yoffset - 0.01f, 0.0f)), alTogether);
//	roadsideBlocks(VAO, shader, glm::translate(identity, glm::vec3(xoffset, yoffset - 0.01f, 0.0f)), glm::translate(identity, glm::vec3(5.01f, 0.0f, 0.0f)));
//	shader.setVec3("emission", glm::vec3(0.1f, 0.1f, 0.1f));
//
//	// lamp
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", false);
//	shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(0.3f, 0.3f, 0.3f));
//	shader.setVec3("material.specular", glm::vec3(0.5f, 0.5f, 0.5f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.1f, 0.1f, 0.1f));
//	scale = glm::scale(identity, glm::vec3(0.05f, 1.5f, 0.05f));
//	translate = glm::translate(identity, glm::vec3(2.0f, 0.0f, 0.0f));
//	model = translate * scale * offset;;
//	glm::mat4 modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, -2.0f));
//	model = translate * model;
//	modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, 4.0f));
//	model = translate * model;
//	modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//
//	shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
//	shader.setVec3("material.specular", glm::vec3(1.0f, 1.0f, 1.0f));
//	scale = glm::scale(identity, glm::vec3(0.1f, 0.1f, 0.1f));
//	translate = glm::translate(identity, glm::vec3(1.9f, 1.4f, 0.0f));
//	model = translate * scale * offset;;
//	modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, -2.0f));
//	model = translate * model;
//	modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, 4.0f));
//	model = translate * model;
//	modelTogether = alTogether * model;
//	drawCube(VAO, shader, modelTogether);
//
//	shader.setVec3("pointLights[0].position", glm::vec3(1.9f, 1.5f, 2.1f));
//	shader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[0].constant", 1.0f);
//	shader.setFloat("pointLights[0].linear", 0.09f);
//	shader.setFloat("pointLights[0].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[0]", true);
//
//	shader.setVec3("pointLights[1].position", glm::vec3(2.0f, 1.5f, 0.15f));
//	shader.setVec3("pointLights[1].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[1].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[1].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[1].constant", 1.0f);
//	shader.setFloat("pointLights[1].linear", 0.09f);
//	shader.setFloat("pointLights[1].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[1]", true);
//
//	shader.setVec3("pointLights[2].position", glm::vec3(2.0f, 1.5f, -1.95f));
//	shader.setVec3("pointLights[2].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[2].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[2].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[2].constant", 1.0f);
//	shader.setFloat("pointLights[2].linear", 0.09f);
//	shader.setFloat("pointLights[2].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[2]", true);
//}
//

//void box(unsigned int& VAO, Shader& shader, glm::mat4 offset, glm::mat4 alTogether)
//{
//	float boxWidth = 0.5f;
//	float boxHeight = 0.5f;
//	
//	glm::mat4 identity, model, scale, translate;
//	identity = glm::mat4(1.0f);
//
//	shader.setBool("withTexture", true);
//	unsigned int diffuseMap = loadTexture("container2.png");
//	unsigned int specularMap = loadTexture("container2_specular.png");
//	shader.setInt("materialtex.diffuse", 0);
//	shader.setInt("materialtex.specular", 1);
//	shader.setFloat("materialtex.shininess", 32.0f);
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1);
//	glBindTexture(GL_TEXTURE_2D, specularMap);
//
//	scale = glm::scale(identity, glm::vec3(boxWidth, boxHeight, boxWidth));
//	//translate = glm::translate(identity, glm::vec3(0.5f, 0.5f, 0.0f));
//	model = alTogether * scale * offset;
//	drawCube(VAO, shader, model);
//}
//
//void simpleRoom(unsigned int& VAO, Shader& shader, glm::mat4 offset, glm::mat4 alTogether, unsigned int& lightCubeVAO, Shader& lightCubeShader)
//{
//	float crWidth = 5.0f;
//	float crLength = 5.0f;
//	float crHeight = 2.0f;
//	float numTables = 16;
//
//	glm::mat4 identity, model, translate, scale, rotate;
//	identity = glm::mat4(1.0f);
//
//	shader.setBool("withTexture", true);
//	shader.setInt("materialtex.diffuse", 0);
//	shader.setInt("materialtex.specular", 1);
//	shader.setFloat("materialtex.shininess", 32.0f);	
//
//	// pointlight src inside simpleRoom
//	scale = glm::scale(identity, glm::vec3(0.5f, 0.05f, 0.05f));
//	translate = glm::translate(identity, glm::vec3(-2.7f, 1.8f, -0.1f));
//	glm::mat4 lightCube =  translate * scale * offset;
//	lightCubeShader.use();
//	if (numOfPointLightRoom == 1) lightCubeShader.setVec3("color", glm::vec3(1.0f, 1.0f, 1.0f));
//	if (numOfPointLightRoom == 0) lightCubeShader.setVec3("color", glm::vec3(0.1f, 0.1f, 0.1f));
//	drawCube(lightCubeVAO, lightCubeShader, lightCube); 
//
//	shader.use();
//	//shader.setInt("numberofPointlights", 1);
//	shader.setVec3("pointLights[0].position", glm::vec3(-2.4f, 1.8f, 0.1f));
//	shader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[0].constant", 1.0f);
//	shader.setFloat("pointLights[0].linear", 0.09f);
//	shader.setFloat("pointLights[0].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[0]", true);
//
//	// floor
//
//	unsigned int diffuseMap = loadTexture("designedTiles.jpg");
//	unsigned int specularMap = loadTexture("designedTiles.jpg");
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1);
//	glBindTexture(GL_TEXTURE_2D, specularMap);
//	
//	shader.setBool("exposedToSun", false);
//	scale = glm::scale(identity, glm::vec3(-crWidth, 0.1f, crLength));	
//	model = alTogether * scale * offset;
//	drawCube(VAO, shader, model);
//
//	diffuseMap = loadTexture("whitewall2.jpg");
//	specularMap = loadTexture("whitewall2.jpg");
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1);
//	glBindTexture(GL_TEXTURE_2D, specularMap);
//
//	//ceilling
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", false);
//	shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
//	shader.setVec3("material.specular", glm::vec3(1.0f, 1.0f, 1.0f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.1f, 0.1f, 0.1f));
//	glm::mat4 model2 = model;
//	translate = glm::translate(identity, glm::vec3(0.0f, crHeight-0.1f, 0.0f));
//	model2 = alTogether * translate * model2;
//	drawCube(VAO, shader, model2);
//
//	// walls
//	// roadside wall of 1st simpleRoom
//	shader.setBool("exposedToSun", true);
//	shader.setInt("numberofPointlights", numOfPointLightRoad);
//	shader.setVec3("pointLights[0].position", glm::vec3(1.9f, 1.5f, 2.1f));
//	shader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[0].constant", 1.0f);
//	shader.setFloat("pointLights[0].linear", 0.09f);
//	shader.setFloat("pointLights[0].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[0]", true);
//
//	shader.setVec3("pointLights[1].position", glm::vec3(2.0f, 1.5f, 0.15f));
//	shader.setVec3("pointLights[1].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[1].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[1].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[1].constant", 1.0f);
//	shader.setFloat("pointLights[1].linear", 0.09f);
//	shader.setFloat("pointLights[1].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[1]", true);
//
//	shader.setVec3("pointLights[2].position", glm::vec3(2.0f, 1.5f, -1.95f));
//	shader.setVec3("pointLights[2].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[2].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[2].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[2].constant", 1.0f);
//	shader.setFloat("pointLights[2].linear", 0.09f);
//	shader.setFloat("pointLights[2].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[2]", true);
//	
//	rotate = glm::rotate(identity, glm::radians(-90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
//	scale = glm::scale(identity, glm::vec3(1.0f, 0.4f, 1.0f));
//	translate = glm::translate(identity, glm::vec3(-0.1f, 0.0f, 0.0f));
//	model = alTogether * translate * scale * rotate * model;
//	drawCube(VAO, shader, model);	
//	shader.setBool("exposedToSun", false);
//	shader.setInt("numberofPointlights", numOfPointLightRoom);
//	shader.setVec3("pointLights[0].position", glm::vec3(-2.4f, 1.8f, 0.1f));
//	shader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[0].constant", 1.0f);
//	shader.setFloat("pointLights[0].linear", 0.09f);
//	shader.setFloat("pointLights[0].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[0]", true);
//
//	translate = glm::translate(identity, glm::vec3(-0.05f, 0.0f, 0.0f));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//	model = glm::translate(model, glm::vec3(-0.05f, 0.0f, 0.0f));
//	glm::mat4 door = model;
//	
//
//	// opposite to road side of 1st simpleRoom
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", false);
//	shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(0.9f, 0.9f, 0.9f));
//	shader.setVec3("material.specular", glm::vec3(0.5f, 0.5f, 0.5f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.1f, 0.1f, 0.1f));
//	translate = glm::translate(identity, glm::vec3(-crWidth + 0.1f, 0.0f, 0.0f));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//	shader.setBool("exposedToSun", false);
//	shader.setBool("withTexture", true);
//	translate = glm::translate(identity, glm::vec3(0.05f, 0.0f, 0.0f));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//	model = glm::translate(model, glm::vec3(-0.05f, 0.0f, 0.0f));
//
//	 // farside wall of 1st simpleRoom
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", false);
//	shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(0.9f, 0.9f, 0.9f));
//	shader.setVec3("material.specular", glm::vec3(0.5f, 0.5f, 0.5f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.1f, 0.1f, 0.1f));
//	rotate = glm::rotate(identity, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
//	translate = glm::translate(identity, glm::vec3(-crWidth/2.0f, 0.1f, crWidth / 2.0f));
//	model = alTogether * translate * rotate * model;
//	drawCube(VAO, shader, model);
//	shader.setBool("exposedToSun", false);
//	shader.setBool("withTexture", true);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, 0.05f));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//	model = glm::translate(model, glm::vec3(0.0f, 0.0f, -0.05f));
//	glm::mat4 frame = model;
//
//	// nearside wall of 1st simpleRoom
//	shader.setBool("exposedToSun", true);
//	translate = glm::translate(identity, glm::vec3(-0.25f, 0.0f, crWidth-0.14));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//	shader.setBool("exposedToSun", false);
//	translate = glm::translate(identity, glm::vec3(0.0f, 0.0f, -0.05f));
//	model = alTogether * translate * model;
//	drawCube(VAO, shader, model);
//
//	diffuseMap = loadTexture("palestine.jpg");
//	specularMap = loadTexture("palestine.jpg");
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1);
//	glBindTexture(GL_TEXTURE_2D, specularMap);
//
//	rotate = glm::rotate(identity, glm::radians(-90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
//	scale = glm::scale(identity, glm::vec3(0.5f, 0.2f, 0.5f));
//	translate = glm::translate(identity, glm::vec3(-1.5f, 0.9f, -1.1f));
//	frame = translate * scale * rotate * frame;
//	drawCube(VAO, shader, frame);
//
//	alTogether = glm::translate(identity, glm::vec3(-crWidth*2.0f + 2.5f, 0.4f, 1.0f)); 
//	table(VAO, shader, offset, alTogether);
//	alTogether = glm::translate(alTogether, glm::vec3(0.0f, 0.0f, 2.0f));
//	table(VAO, shader, offset, alTogether);
//
//	shader.setBool("exposedToSun", true);
//	shader.setBool("withTexture", true);
//	/*shader.setVec3("material.ambient", glm::vec3(0.1f, 0.1f, 0.1f));
//	shader.setVec3("material.diffuse", glm::vec3(1.0f, 0.0f, 0.0f));
//	shader.setVec3("material.specular", glm::vec3(0.5f, 0.5f, 0.5f));
//	shader.setFloat("material.shininess", 32.0f);
//	shader.setVec3("emission", glm::vec3(0.1f, 0.0f, 0.0f));*/
//	diffuseMap = loadTexture("woodCypress.jpg");
//	specularMap = loadTexture("woodCypress.jpg");
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
//	glActiveTexture(GL_TEXTURE1);
//	glBindTexture(GL_TEXTURE_2D, specularMap);
//
//	shader.setBool("exposedToSun", true);
//	shader.setInt("numberofPointlights", numOfPointLightRoad);
//	shader.setVec3("pointLights[0].position", glm::vec3(1.9f, 1.5f, 2.1f));
//	shader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[0].constant", 1.0f);
//	shader.setFloat("pointLights[0].linear", 0.09f);
//	shader.setFloat("pointLights[0].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[0]", true);
//
//	shader.setVec3("pointLights[1].position", glm::vec3(2.0f, 1.5f, 0.15f));
//	shader.setVec3("pointLights[1].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[1].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[1].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[1].constant", 1.0f);
//	shader.setFloat("pointLights[1].linear", 0.09f);
//	shader.setFloat("pointLights[1].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[1]", true);
//
//	shader.setVec3("pointLights[2].position", glm::vec3(2.0f, 1.5f, -1.95f));
//	shader.setVec3("pointLights[2].ambient", 0.05f, 0.05f, 0.05f);
//	shader.setVec3("pointLights[2].diffuse", 0.8f, 0.8f, 0.8f);
//	shader.setVec3("pointLights[2].specular", 1.0f, 1.0f, 1.0f);
//	shader.setFloat("pointLights[2].constant", 1.0f);
//	shader.setFloat("pointLights[2].linear", 0.09f);
//	shader.setFloat("pointLights[2].quadratic", 0.032f);
//	shader.setBool("pointLightStatus[2]", true);
//
//	scale = glm::scale(identity, glm::vec3(1.0f, 0.6f, 0.2f));
//	translate = glm::translate(identity, glm::vec3(crWidth+2.5f+0.06f, -0.2f, -1.2f));
//	door = alTogether * translate * scale * door;
//	drawCube(VAO, shader, door);
//}
//


// world.hillSinglePeak(shaderTex, shaderCurves, false, glm::translate(identity, glm::vec3(0.0f, 3.0f, 0.0f)) * revolve);
		//world.hills(shaderTex, shaderCurves, false, glm::translate(identity, glm::vec3(2.0f, 3.0f, 0.0f)) * glm::scale(identity, glm::vec3(1.0f, 0.75f, 1.0f)));
		//world.hills(shaderTex, shaderCurves, false, glm::translate(identity, glm::vec3(-2.0f, 3.0f, 0.0f)) * glm::scale(identity, glm::vec3(1.0f, 0.45f, 1.0f)));
		//if (gameWon) component.winMsg(shaderTex, identity * glm::translate(identity, glm::vec3(0.0f, 0.0f, protagonistZmove - 2.0f)));
		// component.winMsg(shaderTex, glm::translate(identity, glm::vec3(0.0f, 0.0f, 3.0f)) * revolve);
		//component.tree(shaderMP, shaderCurves, false,  glm::translate(identity, glm::vec3(0.0f, 0.0f, 3.0f)) * revolve);
		//tree(shaderMP, shaderCurves, treeCurves, false,  glm::translate(identity, glm::vec3(0.0f, 0.0f, 3.0f)) * revolve);
		//shaderTex.use();
		//component.texturedSphere(shaderTex, glm::translate(identity, glm::vec3(0.0f, 2.0f, 3.0f)) * revolve);
		// 
		//component.waterTank(shaderMP, false, glm::translate(identity, glm::vec3(0.0f, 0.0f, 2.0f)) * revolve);
		/*scale = glm::scale(identity, glm::vec3(0.8f, 0.5f, 0.5f));
		rotate = glm::rotate(identity, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		component.billboard_seventyone(shaderTex, shaderMP, glm::translate(identity, glm::vec3(0.0f, -0.5f, 1.0f)) * scale);*/